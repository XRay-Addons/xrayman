// Code generated by MockGen. DO NOT EDIT.
// Source: node.go
//
// Generated by this command:
//
//	mockgen -source=node.go -destination=./mocks/node_api.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/XRay-Addons/xrayman/nodeman/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockNodeAPI is a mock of NodeAPI interface.
type MockNodeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNodeAPIMockRecorder
	isgomock struct{}
}

// MockNodeAPIMockRecorder is the mock recorder for MockNodeAPI.
type MockNodeAPIMockRecorder struct {
	mock *MockNodeAPI
}

// NewMockNodeAPI creates a new mock instance.
func NewMockNodeAPI(ctrl *gomock.Controller) *MockNodeAPI {
	mock := &MockNodeAPI{ctrl: ctrl}
	mock.recorder = &MockNodeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeAPI) EXPECT() *MockNodeAPIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNodeAPI) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNodeAPIMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNodeAPI)(nil).Close), ctx)
}

// EditUsers mocks base method.
func (m *MockNodeAPI) EditUsers(ctx context.Context, users []service.UserState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUsers", ctx, users)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUsers indicates an expected call of EditUsers.
func (mr *MockNodeAPIMockRecorder) EditUsers(ctx, users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUsers", reflect.TypeOf((*MockNodeAPI)(nil).EditUsers), ctx, users)
}

// Start mocks base method.
func (m *MockNodeAPI) Start(ctx context.Context, users []service.User) (*service.NodeConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, users)
	ret0, _ := ret[0].(*service.NodeConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockNodeAPIMockRecorder) Start(ctx, users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNodeAPI)(nil).Start), ctx, users)
}

// Status mocks base method.
func (m *MockNodeAPI) Status(ctx context.Context) (service.NodeState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(service.NodeState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockNodeAPIMockRecorder) Status(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockNodeAPI)(nil).Status), ctx)
}

// Stop mocks base method.
func (m *MockNodeAPI) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNodeAPIMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNodeAPI)(nil).Stop), ctx)
}

// MockNodeUpdater is a mock of NodeUpdater interface.
type MockNodeUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockNodeUpdaterMockRecorder
	isgomock struct{}
}

// MockNodeUpdaterMockRecorder is the mock recorder for MockNodeUpdater.
type MockNodeUpdaterMockRecorder struct {
	mock *MockNodeUpdater
}

// NewMockNodeUpdater creates a new mock instance.
func NewMockNodeUpdater(ctrl *gomock.Controller) *MockNodeUpdater {
	mock := &MockNodeUpdater{ctrl: ctrl}
	mock.recorder = &MockNodeUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeUpdater) EXPECT() *MockNodeUpdaterMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockNodeUpdater) Apply(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockNodeUpdaterMockRecorder) Apply(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockNodeUpdater)(nil).Apply), ctx)
}

// SetConfig mocks base method.
func (m *MockNodeUpdater) SetConfig(cfg *service.NodeConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfig", cfg)
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockNodeUpdaterMockRecorder) SetConfig(cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockNodeUpdater)(nil).SetConfig), cfg)
}

// SetState mocks base method.
func (m *MockNodeUpdater) SetState(state service.NodeState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", state)
}

// SetState indicates an expected call of SetState.
func (mr *MockNodeUpdaterMockRecorder) SetState(state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockNodeUpdater)(nil).SetState), state)
}

// SetUsers mocks base method.
func (m *MockNodeUpdater) SetUsers(users []service.UserState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUsers", users)
}

// SetUsers indicates an expected call of SetUsers.
func (mr *MockNodeUpdaterMockRecorder) SetUsers(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUsers", reflect.TypeOf((*MockNodeUpdater)(nil).SetUsers), users)
}

// MockNodeStorage is a mock of NodeStorage interface.
type MockNodeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockNodeStorageMockRecorder
	isgomock struct{}
}

// MockNodeStorageMockRecorder is the mock recorder for MockNodeStorage.
type MockNodeStorageMockRecorder struct {
	mock *MockNodeStorage
}

// NewMockNodeStorage creates a new mock instance.
func NewMockNodeStorage(ctrl *gomock.Controller) *MockNodeStorage {
	mock := &MockNodeStorage{ctrl: ctrl}
	mock.recorder = &MockNodeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeStorage) EXPECT() *MockNodeStorageMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method.
func (m *MockNodeStorage) GetAllUsers(ctx context.Context) ([]service.UserState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]service.UserState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockNodeStorageMockRecorder) GetAllUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockNodeStorage)(nil).GetAllUsers), ctx)
}

// GetNodeState mocks base method.
func (m *MockNodeStorage) GetNodeState(ctx context.Context) (service.NodeState, service.NodeState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeState", ctx)
	ret0, _ := ret[0].(service.NodeState)
	ret1, _ := ret[1].(service.NodeState)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNodeState indicates an expected call of GetNodeState.
func (mr *MockNodeStorageMockRecorder) GetNodeState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeState", reflect.TypeOf((*MockNodeStorage)(nil).GetNodeState), ctx)
}

// GetPendingUsers mocks base method.
func (m *MockNodeStorage) GetPendingUsers(ctx context.Context) ([]service.UserState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingUsers", ctx)
	ret0, _ := ret[0].([]service.UserState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingUsers indicates an expected call of GetPendingUsers.
func (mr *MockNodeStorageMockRecorder) GetPendingUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingUsers", reflect.TypeOf((*MockNodeStorage)(nil).GetPendingUsers), ctx)
}

// GetUpdater mocks base method.
func (m *MockNodeStorage) GetUpdater(ctx context.Context) (service.NodeUpdater, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdater", ctx)
	ret0, _ := ret[0].(service.NodeUpdater)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdater indicates an expected call of GetUpdater.
func (mr *MockNodeStorageMockRecorder) GetUpdater(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdater", reflect.TypeOf((*MockNodeStorage)(nil).GetUpdater), ctx)
}
