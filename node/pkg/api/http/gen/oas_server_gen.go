// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// EditUsers implements EditUsers operation.
	//
	// Edit node users list.
	//
	// POST /users/edit
	EditUsers(ctx context.Context, req *EditUsersRequest) error
	// GetStatus implements GetStatus operation.
	//
	// Get current service status.
	//
	// GET /status
	GetStatus(ctx context.Context) (*StatusResponse, error)
	// StartPost implements StartPost operation.
	//
	// Start node with user list.
	//
	// POST /start
	StartPost(ctx context.Context, req *StartRequest) (*StartResponse, error)
	// StopPost implements StopPost operation.
	//
	// Stop node.
	//
	// POST /stop
	StopPost(ctx context.Context) error
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
