// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../pkg/api/http/gen/oas_server_gen.go
//
// Generated by this command:
//
//	mockgen -source=../../../pkg/api/http/gen/oas_server_gen.go -destination=./mocks/mock_handler.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/XRay-Addons/xrayman/node/pkg/api/http/gen"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
	isgomock struct{}
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// EditUsers mocks base method.
func (m *MockHandler) EditUsers(ctx context.Context, req *api.EditUsersRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUsers", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUsers indicates an expected call of EditUsers.
func (mr *MockHandlerMockRecorder) EditUsers(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUsers", reflect.TypeOf((*MockHandler)(nil).EditUsers), ctx, req)
}

// GetStatus mocks base method.
func (m *MockHandler) GetStatus(ctx context.Context) (*api.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx)
	ret0, _ := ret[0].(*api.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockHandlerMockRecorder) GetStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockHandler)(nil).GetStatus), ctx)
}

// NewError mocks base method.
func (m *MockHandler) NewError(ctx context.Context, err error) *api.ErrorStatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewError", ctx, err)
	ret0, _ := ret[0].(*api.ErrorStatusCode)
	return ret0
}

// NewError indicates an expected call of NewError.
func (mr *MockHandlerMockRecorder) NewError(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewError", reflect.TypeOf((*MockHandler)(nil).NewError), ctx, err)
}

// StartPost mocks base method.
func (m *MockHandler) StartPost(ctx context.Context, req *api.StartRequest) (*api.StartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPost", ctx, req)
	ret0, _ := ret[0].(*api.StartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPost indicates an expected call of StartPost.
func (mr *MockHandlerMockRecorder) StartPost(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPost", reflect.TypeOf((*MockHandler)(nil).StartPost), ctx, req)
}

// StopPost mocks base method.
func (m *MockHandler) StopPost(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPost", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopPost indicates an expected call of StopPost.
func (mr *MockHandlerMockRecorder) StopPost(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPost", reflect.TypeOf((*MockHandler)(nil).StopPost), ctx)
}
