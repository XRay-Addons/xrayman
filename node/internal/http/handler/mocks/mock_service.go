// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/XRay-Addons/xrayman/node/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// EditUsers mocks base method.
func (m *MockService) EditUsers(ctx context.Context, params models.EditUsersParams) (*models.EditUsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUsers", ctx, params)
	ret0, _ := ret[0].(*models.EditUsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditUsers indicates an expected call of EditUsers.
func (mr *MockServiceMockRecorder) EditUsers(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUsers", reflect.TypeOf((*MockService)(nil).EditUsers), ctx, params)
}

// Start mocks base method.
func (m *MockService) Start(ctx context.Context, params models.StartParams) (*models.StartResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, params)
	ret0, _ := ret[0].(*models.StartResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockServiceMockRecorder) Start(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start), ctx, params)
}

// Status mocks base method.
func (m *MockService) Status(ctx context.Context, params models.StatusParams) (*models.StatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx, params)
	ret0, _ := ret[0].(*models.StatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockServiceMockRecorder) Status(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockService)(nil).Status), ctx, params)
}

// Stop mocks base method.
func (m *MockService) Stop(ctx context.Context, params models.StopParams) (*models.StopResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, params)
	ret0, _ := ret[0].(*models.StopResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockServiceMockRecorder) Stop(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockService)(nil).Stop), ctx, params)
}
